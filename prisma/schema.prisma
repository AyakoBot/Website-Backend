generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AutoPunishPunishmentType {
  warn
  kick
  tempmute
  ban
  tempban
  channelban
  tempchannelban
  softban
}

enum PunishmentType {
  warn
  kick
  tempmute
  ban
  tempban
  channelban
  tempchannelban
  strike
  softban
}

enum AntiRaidPunishmentType {
  kick
  ban
}

enum AnswerType {
  paragraph
  short
  number
  boolean
  multiple_choice
  single_choice
  text
}

enum LevelType {
  guild
  global
}

enum LevelUpMode {
  message
  react
  silent
}

enum VoteType {
  guild
  bot
}

enum ShopType {
  command
  message
}

model afk {
  userid  String  @db.VarChar
  text    String?
  since   Decimal @db.Decimal
  guildid String  @db.VarChar

  @@id([userid, guildid])
  @@index([userid, guildid])
}

model antispam { 
  guildid              String         @db.VarChar
  active               Boolean        @default(false)
  wluserid             String[]       @db.VarChar
  wlchannelid          String[]       @db.VarChar
  wlroleid             String[]       @db.VarChar
  forcedisabled        Boolean        @default(false)
  msgthreshold         Decimal        @db.Decimal     @default(10)
  dupemsgthreshold     Decimal        @db.Decimal     @default(5)
  timeout              Decimal        @db.Decimal     @default(15)
  deletespam           Boolean        @default(true)
  action               PunishmentType @default(warn)
  duration             Decimal        @db.Decimal     @default(3600)
  deletemessageseconds Decimal        @db.Decimal     @default(604800)

  @@id(guildid, map: "antispamsettings_pkey")
  @@index(guildid)
}

model antivirus {
  guildid              String         @db.VarChar
  active               Boolean        @db.Boolean @default(false)
  linklogging          Boolean        @db.Boolean @default(false)
  linklogchannels      String[]       @db.VarChar
  action               PunishmentType             @default(warn)
  duration             Decimal        @db.Decimal @default(3600)
  deletemessageseconds Decimal        @db.Decimal @default(604800) 

  @@id(guildid, map: "antivirus_pkey")
  @@index(guildid)
}

model appealquestions {
  guildid         String      @db.VarChar
  uniquetimestamp Decimal     @db.Decimal
  active          Boolean     @db.Boolean @default(false)
  question        String?     @db.Text
  answertype      AnswerType              @default(paragraph)
  required        Boolean     @db.Boolean @default(true)
  options         String[]    @db.Text

  @@id(uniquetimestamp, map: "appealquestions_pkey")
  @@index([guildid, uniquetimestamp])
}

model appeals {
  userid        String   @db.VarChar
  guildid       String   @db.VarChar
  questions     String[] @db.Text
  questiontypes String[] @db.Text
  answers       String[] @db.Text
  punishmentid  Decimal  @db.Decimal

  @@id([userid, punishmentid])
  @@index([userid, punishmentid])
}

model appealsettings {
  guildid   String   @db.VarChar
  active    Boolean  @db.Boolean @default(false)
  channelid String?  @db.VarChar
  bluserid  String[] @db.VarChar

  @@id(guildid, map: "appealsettings_pkey")
  @@index(guildid)
}

model art {
  userid   String  @db.VarChar
  created  Decimal @db.Decimal
  url      String  @db.Text
  type     String  @db.Text    @default("full")
  verified Boolean @db.Boolean @default(false)

  @@id(created, map: "art_pkey")
  @@index(created)
}

model autopunish {
  guildid              String                   @db.VarChar
  uniquetimestamp      Decimal                  @db.Decimal
  duration             Decimal                  @db.Decimal @default(3600)
  warnamount           Decimal?                 @db.Decimal
  active               Boolean                  @db.Boolean @default(false)
  addroles             String[]                 @db.VarChar
  removeroles          String[]                 @db.VarChar
  punishment           AutoPunishPunishmentType             @default(warn)
  deletemessageseconds Decimal                  @db.Decimal @default(604800)

  @@id(uniquetimestamp, map: "autopunish_pkey")
  @@index([guildid, uniquetimestamp])
}

model autoroles {
  guildid    String   @db.VarChar
  active     Boolean  @db.Boolean @default(false)
  botroleid  String[] @db.VarChar
  userroleid String[] @db.VarChar
  allroleid  String[] @db.VarChar

  @@id(guildid, map: "autorole_pkey")
  @@index(guildid)
}

model balance {
  userid  String  @db.VarChar
  guildid String  @db.VarChar
  balance Decimal @db.Decimal @default(0)

  @@id([userid, guildid])
  @@index([userid, guildid])
}

model censor {
  active      Boolean  @db.Boolean @default(false)
  guildid     String   @db.VarChar
  repostroles String[] @db.VarChar
  repostrules String[] @db.VarChar

  @@id(guildid, map: "censor_pkey")
  @@index(guildid)
}

model customroles {
  guildid String @db.VarChar
  userid  String @db.VarChar
  roleid  String @db.VarChar

  @@index([guildid, userid])
  @@id([guildid, userid])
}

model newlines {
  active               Boolean        @db.Boolean @default(false)
  guildid              String         @db.VarChar
  maxnewlines          Decimal?       @db.Decimal
  wlroleid             String[]       @db.VarChar
  wlchannelid          String[]       @db.VarChar
  action               PunishmentType             @default(warn)
  duration             Decimal        @db.Decimal @default(3600)
  deletemessageseconds Decimal        @db.Decimal @default(604800)

  @@id(guildid, map: "newlines_pkey")
  @@index(guildid)
}

model invites {
  active               Boolean        @db.Boolean @default(false)
  guildid              String         @db.VarChar
  wlroleid             String[]       @db.VarChar
  wlchannelid          String[]       @db.VarChar
  action               PunishmentType             @default(warn)
  duration             Decimal        @db.Decimal @default(3600)
  deletemessageseconds Decimal        @db.Decimal @default(604800)

  @@id(guildid, map: "invites_pkey")
  @@index(guildid)
}

model buttonroles {
  uniquetimestamp Decimal  @db.Decimal
  roles           String[] @db.VarChar
  emote           String?  @db.VarChar
  text            String?  @db.Text
  active          Boolean  @db.Boolean @default(false)
  linkedid        Decimal? @db.Decimal
  guildid         String   @db.VarChar

  @@id(uniquetimestamp, map: "buttonroles_pkey")
  @@index([guildid, uniquetimestamp])
}

model buttonrolesettings {
  guildid         String   @db.VarChar
  msgid           String?  @db.VarChar
  channelid       String?  @db.VarChar
  uniquetimestamp Decimal  @db.Decimal
  active          Boolean  @db.Boolean @default(false)
  anyroles        String[] @db.VarChar
  onlyone         Boolean  @db.Boolean @default(false)

  @@id(uniquetimestamp, map: "buttonrolesettings_pkey")
  @@index([guildid, uniquetimestamp])
}

model contributers {
  userid String   @db.VarChar
  roles  String[] @db.VarChar

  @@id(userid, map: "contributers_pkey")
}

model cooldowns {
  command         String?  @db.Text
  cooldown        Decimal  @db.Decimal @default(10)
  active          Boolean  @db.Boolean @default(false)
  wlchannelid     String[] @db.VarChar
  wlroleid        String[] @db.VarChar
  wluserid        String[] @db.VarChar
  activechannelid String[] @db.VarChar
  uniquetimestamp Decimal  @db.Decimal
  guildid         String   @db.VarChar

  @@id(uniquetimestamp, map: "cooldowns_pkey")
  @@index([guildid, uniquetimestamp])
}

model customembeds {
  color           String?   @db.Text
  title           String?   @db.Text
  url             String?   @db.Text
  authorname      String?   @db.Text
  authoriconurl   String?   @db.Text
  authorurl       String?   @db.Text
  description     String?   @db.Text
  thumbnail       String?   @db.Text
  fieldnames      String[]  @db.Text
  fieldvalues     String[]  @db.Text
  fieldinlines    Boolean[] @db.Boolean
  image           String?   @db.Text
  footertext      String?   @db.Text
  footericonurl   String?   @db.Text
  uniquetimestamp Decimal   @db.Decimal
  guildid         String    @db.VarChar
  name            String    @db.Text
  timestamp       String?   @db.Text

  @@id(uniquetimestamp, map: "customembeds_pkey")
  @@index([guildid, uniquetimestamp])
}

model disboard {
  guildid        String   @db.VarChar
  active         Boolean  @db.Boolean @default(false)
  nextbump       Decimal? @db.Decimal
  channelid      String?  @db.VarChar
  repeatreminder Decimal  @db.Decimal @default(600)
  roles          String[] @db.VarChar
  users          String[] @db.VarChar
  tempchannelid  String?  @db.VarChar
  deletereply    Boolean  @db.Boolean @default(false)
  msgid          String?  @db.VarChar
  repeatenabled  Boolean  @db.Boolean @default(true)

  @@id(guildid, map: "disboard_pkey")
  @@index(guildid)
}

model expiry {
  guildid         String   @db.VarChar
  bans            Boolean  @db.Boolean @default(false)
  channelbans     Boolean  @db.Boolean @default(false)
  kicks           Boolean  @db.Boolean @default(false)
  mutes           Boolean  @db.Boolean @default(false)
  warns           Boolean  @db.Boolean @default(false)
  banstime        Decimal? @db.Decimal
  channelbanstime Decimal? @db.Decimal
  kickstime       Decimal? @db.Decimal
  mutestime       Decimal? @db.Decimal
  warnstime       Decimal? @db.Decimal

  @@id(guildid, map: "modsettings_pkey")
  @@index(guildid)
}

model filterscraper {
  keyword    String  @db.Text
  filtertype Decimal @db.Decimal

  @@id([keyword, filtertype])
}

model giveawaycollection {
  msgid           String   @db.VarChar
  endtime         Decimal  @db.Decimal
  guildid         String   @db.VarChar
  replymsgid      String   @db.VarChar
  requiredwinners String[] @db.VarChar

  @@id(msgid, map: "giveawaycollection_pkey")
  @@index(msgid)
}

model giveaways {
  guildid      String   @db.VarChar
  msgid        String   @db.VarChar
  description  String   @db.Text
  winnercount  Decimal  @db.Decimal
  endtime      Decimal  @db.Decimal
  reqrole      String?  @db.VarChar
  actualprize  String?  @db.Text
  host         String   @db.VarChar
  ended        Boolean  @db.Boolean @default(false)
  channelid    String   @db.VarChar
  participants String[] @db.VarChar
  collecttime  Decimal? @db.Decimal
  failreroll   Boolean  @db.Boolean @default(false)
  winners      String[] @db.VarChar
  claimingdone Boolean  @db.Boolean @default(false)

  @@id(msgid, map: "giveaways_pkey")
  @@index(msgid)
}

model guilds {
  guildid     String  @db.VarChar
  name        String  @db.Text
  icon        String? @db.Text
  banner      String? @db.Text
  invite      String? @db.Text
  membercount Decimal @db.Decimal @default(2)

  @@id(guildid, map: "guilds_pkey")
  @@index(guildid)
}

model guildsettings {
  guildid           String   @db.VarChar
  prefix            String?  @db.Text
  // false is large, true is small
  interactionsmode  Boolean  @db.Boolean @default(true)
  editrpcommands    Boolean  @db.Boolean @default(true)
  lan               String   @db.Text    @default("en-GB")
  errorchannel      String?  @db.VarChar
  statuschannel     String?  @db.VarChar
  updateschannel    String?  @db.Text
  enabledrp         Boolean  @db.Boolean @default(false)
  rpenableruns      Decimal  @db.Decimal @default(0)
  lastrpsyncrun     Decimal? @db.Decimal
  ptreminderenabled Boolean  @db.Boolean @default(true)
  legacyrp          Boolean  @db.Boolean @default(false)
  token             String?  @db.VarChar
  publickey         String?  @db.Text
  appid             String?  @db.VarChar
  enableinvitesat   Decimal? @db.Decimal

  @@id(guildid, map: "guildsettings_pkey")
  @@index(guildid)
}

model level {
  userid     String    @db.VarChar
  guildid    String    @db.VarChar @default("1")
  type       LevelType
  xp         Decimal   @db.Decimal @default(0)
  level      Decimal   @db.Decimal @default(0)
  multiplier Decimal   @db.Decimal @default(1)

  @@id([userid, guildid, type])
  @@index(guildid)
}

model leveling {
  guildid         String      @db.VarChar
  active          Boolean     @db.Boolean @default(true)
  xpmultiplier    Decimal     @db.Decimal @default(1)
  blchannelid     String[]    @db.VarChar
  blroleid        String[]    @db.VarChar
  bluserid        String[]    @db.VarChar
  wlchannelid     String[]    @db.VarChar
  wlroleid        String[]    @db.VarChar
  wluserid        String[]    @db.VarChar
  xppermsg        Decimal     @db.Decimal @default(25)
  // true = stack, false = replace
  rolemode        Boolean     @db.Boolean @default(true)
  lvlupmode       LevelUpMode             @default(silent)
  lvlupdeltimeout Decimal     @db.Decimal @default(10)
  lvlupchannels   String[]    @db.VarChar
  lvlupemotes     String[]    @db.VarChar @default(["🆙","AMayakopeek:924071140257841162"])
  embed           Decimal?    @db.Decimal
  ignoreprefixes  Boolean     @db.Boolean @default(false)
  prefixes        String[]    @db.Text
  minwords        Decimal     @db.Decimal @default(0)

  @@id(guildid, map: "leveling_pkey")
  @@index(guildid)
}

model levelingmultichannels {
  guildid         String   @db.VarChar
  channels        String[] @db.VarChar
  multiplier      Decimal  @db.Decimal @default(1)
  uniquetimestamp Decimal  @db.Decimal

  @@id(uniquetimestamp, map: "levelingmultiplierchannels_pkey")
  @@index([guildid, uniquetimestamp])
}

model levelingmultiroles {
  guildid         String   @db.VarChar
  roles           String[] @db.VarChar
  multiplier      Decimal? @db.Decimal
  uniquetimestamp Decimal  @db.Decimal

  @@id(uniquetimestamp, map: "levelingmultiplierroles_pkey")
  @@index([guildid, uniquetimestamp])
}

model levelingroles {
  guildid         String   @db.VarChar
  level           Decimal? @db.Decimal
  roles           String[] @db.VarChar
  uniquetimestamp Decimal  @db.Decimal

  @@id(uniquetimestamp, map: "levelingroles_pkey")
  @@index([guildid, uniquetimestamp])
}

model levelingruleschannels {
  guildid               String   @db.VarChar
  channels              String[] @db.VarChar
  uniquetimestamp       Decimal  @db.Decimal
  hasleastattachments   Decimal? @db.Decimal
  hasmostattachments    Decimal? @db.Decimal
  hasleastcharacters    Decimal? @db.Decimal
  hasmostcharacters     Decimal? @db.Decimal
  hasleastwords         Decimal? @db.Decimal
  hasmostwords          Decimal? @db.Decimal
  mentionsleastusers    Decimal? @db.Decimal
  mentionsmostusers     Decimal? @db.Decimal
  mentionsleastchannels Decimal? @db.Decimal
  mentionsmostchannels  Decimal? @db.Decimal
  mentionsleastroles    Decimal? @db.Decimal
  mentionsmostroles     Decimal? @db.Decimal
  hasleastlinks         Decimal? @db.Decimal
  hasmostlinks          Decimal? @db.Decimal
  hasleastemotes        Decimal? @db.Decimal
  hasmostemotes         Decimal? @db.Decimal
  hasleastmentions      Decimal? @db.Decimal
  hasmostmentions       Decimal? @db.Decimal

  @@id(uniquetimestamp, map: "levelingruleschannels_pkey")
  @@index([guildid, uniquetimestamp])
}

model logchannels {
  guildid              String   @db.VarChar
  applicationevents    String[] @db.VarChar
  automodevents        String[] @db.VarChar
  channelevents        String[] @db.VarChar
  emojievents          String[] @db.VarChar
  guildevents          String[] @db.VarChar
  scheduledeventevents String[] @db.VarChar
  inviteevents         String[] @db.VarChar
  messageevents        String[] @db.VarChar
  roleevents           String[] @db.VarChar
  stageevents          String[] @db.VarChar
  stickerevents        String[] @db.VarChar
  typingevents         String[] @db.VarChar
  userevents           String[] @db.VarChar
  voiceevents          String[] @db.VarChar
  webhookevents        String[] @db.VarChar
  settingslog          String[] @db.VarChar
  modlog               String[] @db.VarChar
  reactionevents       String[] @db.VarChar
  memberevents         String[] @db.VarChar

  @@id(guildid, map: "logchannels_pkey")
  @@index(guildid)
}

model nitroroles {
  guildid         String   @db.VarChar
  uniquetimestamp Decimal  @db.Decimal
  roles           String[] @db.VarChar
  days            Decimal? @db.Decimal

  @@id(uniquetimestamp, map: "nitroroles_pkey")
  @@index([guildid, uniquetimestamp])
}

model nitrosettings {
  guildid       String   @db.VarChar
  active        Boolean  @db.Boolean @default(false)
  logchannels   String[] @db.VarChar
  // true = stack, false = replace (WARNING: this value was inverted in relation to the old DB)
  rolemode      Boolean  @db.Boolean @default(true)
  notification  Boolean  @db.Boolean @default(false) 
  notifchannels String[] @db.VarChar
  notifembed    Decimal? @db.Decimal

  @@id(guildid, map: "nitrosettings_pkey")
  @@index(guildid)
}

model nitrousers {
  guildid    String   @db.VarChar
  userid     String   @db.VarChar
  booststart Decimal  @db.Decimal
  boostend   Decimal? @db.Decimal

  @@id(booststart, map: "nitrousers_pkey")
  @@index(guildid)
}

model punish_bans {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?  @db.Text
  uniquetimestamp Decimal  @db.Decimal
  channelid       String   @db.VarChar
  channelname     String   @db.Text
  executorid      String   @db.VarChar
  executorname    String   @db.Text
  duration        Decimal? @db.Decimal
  msgid           String   @db.VarChar

  @@id(uniquetimestamp, map: "mutes_pkey")
  @@index([guildid, uniquetimestamp, userid])
}

model punish_channelbans {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?  @db.Text
  uniquetimestamp Decimal  @db.Decimal
  channelid       String   @db.VarChar
  channelname     String   @db.Text
  executorid      String   @db.VarChar
  executorname    String   @db.Text
  msgid           String   @db.VarChar
  banchannelid    String   @db.VarChar
  duration        Decimal? @db.Decimal

  @@id(uniquetimestamp, map: "punish_channelban_pkey")
  @@index([guildid, uniquetimestamp, userid])
}

model punish_kicks {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String? @db.Text
  uniquetimestamp Decimal @db.Decimal
  channelid       String  @db.VarChar
  channelname     String  @db.Text
  executorid      String  @db.VarChar
  executorname    String  @db.Text
  msgid           String  @db.VarChar

  @@id(uniquetimestamp, map: "punish_kicks_pkey")
  @@index([guildid, uniquetimestamp, userid])
}

model punish_mutes {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?  @db.Text
  uniquetimestamp Decimal  @db.Decimal
  channelid       String   @db.VarChar
  channelname     String   @db.Text
  executorid      String   @db.VarChar
  executorname    String   @db.Text
  msgid           String   @db.VarChar
  duration        Decimal? @db.Decimal

  @@id(uniquetimestamp, map: "punish_mutes_pkey")
  @@index([guildid, uniquetimestamp, userid])
}

model punish_tempbans {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String? @db.Text
  uniquetimestamp Decimal @db.Decimal
  channelid       String  @db.VarChar
  channelname     String  @db.Text
  executorid      String  @db.VarChar
  executorname    String  @db.Text
  msgid           String  @db.VarChar
  duration        Decimal @db.Decimal

  @@id(uniquetimestamp, map: "punish_tempbans_pkey")
  @@index([guildid, userid])
}

model punish_tempchannelbans {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String? @db.Text
  uniquetimestamp Decimal @db.Decimal
  channelid       String  @db.VarChar
  channelname     String  @db.Text
  executorid      String  @db.VarChar
  executorname    String  @db.Text
  msgid           String  @db.VarChar
  banchannelid    String  @db.VarChar
  duration        Decimal @db.Decimal

  @@id(uniquetimestamp, map: "punish_tempchannelban_pkey")
  @@index([guildid, uniquetimestamp, userid])
}

model punish_tempmutes {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String? @db.Text
  uniquetimestamp Decimal @db.Decimal
  channelid       String  @db.VarChar
  channelname     String  @db.Text
  executorid      String  @db.VarChar
  executorname    String  @db.Text
  msgid           String  @db.VarChar
  duration        Decimal @db.Decimal

  @@id(uniquetimestamp, map: "punish_tempmutes_pkey")
  @@index([guildid, userid])
}

model punish_warns {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String? @db.Text
  uniquetimestamp Decimal @db.Decimal
  channelid       String  @db.VarChar
  channelname     String  @db.Text
  executorid      String  @db.VarChar
  executorname    String  @db.Text
  msgid           String  @db.VarChar

  @@id(uniquetimestamp, map: "punish_warns_pkey")
  @@index([guildid, uniquetimestamp, userid])
}

model reactionroles {
  uniquetimestamp Decimal  @db.Decimal
  emote           String?  @db.VarChar
  roles           String[] @db.VarChar
  active          Boolean  @db.Boolean @default(false)
  linkedid        Decimal? @db.Decimal
  guildid         String   @db.VarChar

  @@id(uniquetimestamp, map: "rrreactions_pkey")
  @@index([guildid, uniquetimestamp])
}

model reactionrolesettings {
  guildid         String   @db.VarChar
  msgid           String?  @db.VarChar
  uniquetimestamp Decimal  @db.Decimal
  active          Boolean  @db.Boolean @default(false)
  anyroles        String[] @db.VarChar
  channelid       String?  @db.VarChar

  @@id(uniquetimestamp, map: "rrsettings_pkey")
  @@index([guildid, uniquetimestamp])
}

model reminders {
  userid          String  @db.VarChar
  channelid       String  @db.VarChar
  reason          String  @db.Text
  uniquetimestamp Decimal @db.Decimal
  endtime         Decimal @db.Decimal

  @@id(uniquetimestamp, map: "reminders_pkey")
  @@index([userid, uniquetimestamp])
}

model reviews {
  userid   String  @db.VarChar
  score    Decimal @db.Decimal @default(1) 
  username String  @db.Text
  avatar   String? @db.Text
  content  String  @db.Text

  @@id(userid, map: "reviews_pkey")
  @@index(userid)
}

model rolerewards {
  guildid         String   @db.VarChar
  uniquetimestamp Decimal  @db.Decimal
  active          Boolean  @db.Boolean @default(false)
  customrole      Boolean  @db.Boolean @default(false)
  positionrole    String?  @db.Text
  xpmultiplier    Decimal? @db.Decimal
  currency        Decimal? @db.Decimal
  blroleid        String[] @db.VarChar
  bluserid        String[] @db.VarChar
  roles           String[] @db.VarChar
  cansetcolor     Boolean  @db.Boolean @default(true)
  canseticon      Boolean  @db.Boolean @default(true)

  @@id(uniquetimestamp, map: "rolerewards_pkey")
  @@index([guildid, uniquetimestamp])
}

model roleseparator {
  guildid         String   @db.VarChar
  separator       String?  @db.VarChar
  active          Boolean  @db.Boolean @default(false)
  stoprole        String?  @db.VarChar
  isvarying       Boolean  @db.Boolean @default(false)
  roles           String[] @db.VarChar
  uniquetimestamp Decimal  @db.Decimal

  @@id(uniquetimestamp, map: "roleseparator_pkey")
  @@index([guildid, uniquetimestamp])
}

model roleseparatorsettings {
  guildid      String   @db.VarChar
  stillrunning Boolean  @db.Boolean
  channelid    String?  @db.VarChar
  messageid    String?  @db.VarChar
  duration     Decimal? @db.Decimal
  startat      Decimal? @db.Decimal
  index        Decimal? @db.Decimal
  length       Decimal? @db.Decimal

  @@id(guildid, map: "roleseparatorsettings_pkey")
  @@index(guildid)
}

model selfroles {
  guildid         String   @db.VarChar
  roles           String[] @db.VarChar
  onlyone         Boolean  @db.Boolean @default(false)
  uniquetimestamp Decimal  @db.Decimal
  blroleid        String[] @db.VarChar
  bluserid        String[] @db.VarChar
  wlroleid        String[] @db.VarChar
  wluserid        String[] @db.VarChar
  active          Boolean  @db.Boolean @default(false)
  name            String   @db.Text    @default("Change me")

  @@id(uniquetimestamp, map: "selfroles_pkey")
  @@index([guildid, uniquetimestamp])
}

model stats {
  usercount    Decimal  @db.Decimal
  guildcount   Decimal  @db.Decimal
  channelcount Decimal  @db.Decimal
  rolecount    Decimal  @db.Decimal
  allusers     Decimal  @db.Decimal
  willis       String[] @db.Text
  heartbeat    Decimal  @db.Decimal

  @@id(usercount, map: "stats_pkey")
}

model sticky {
  guildid           String   @db.VarChar
  roles             String[] @db.VarChar
  // true = list of unsticky roles, false = list of sticky roles
  stickyrolesmode   Boolean  @db.Boolean @default(true)
  stickyrolesactive Boolean  @db.Boolean @default(false)
  stickypermsactive Boolean  @db.Boolean @default(false)

  @@id(guildid, map: "sticky_pkey")
  @@index(guildid)
}

model stickymessages {
  guildid   String @db.VarChar
  lastmsgid String @db.VarChar
  channelid String @db.VarChar
  userid    String @db.VarChar

  @@id(channelid, map: "stickymessages_pkey")
  @@index(guildid)
}

model stickypermmembers {
  userid    String  @db.VarChar
  guildid   String  @db.VarChar
  channelid String  @db.VarChar
  denybits  BigInt  @db.BigInt @default(0)
  allowbits BigInt  @db.BigInt @default(0)

  @@id([userid, channelid], map: "stickypermmembers_pkey")
  @@index(guildid)
}

model stickyrolemembers {
  userid  String   @db.VarChar
  guildid String   @db.VarChar
  roles   String[] @db.VarChar

  @@id([userid, guildid])
  @@index(guildid)
}

model suggestionsettings {
  guildid             String   @db.VarChar
  active              Boolean  @db.Boolean @default(false)
  channelid           String?  @db.VarChar
  novoteroles         String[] @db.VarChar
  novoteusers         String[] @db.VarChar
  approverroleid      String[] @db.VarChar
  anonvote            Boolean  @db.Boolean @default(false)
  nosendroles         String[] @db.VarChar
  nosendusers         String[] @db.VarChar
  anonsuggestion      Boolean  @db.Boolean @default(false)
  pingroleid          String[] @db.VarChar
  pinguserid          String[] @db.VarChar
  deletedenied        Boolean  @db.Boolean @default(false)
  deleteapproved      Boolean  @db.Boolean @default(false)
  deletedeniedafter   Decimal  @db.Decimal @default(86400) 
  deleteapprovedafter Decimal  @db.Decimal @default(86400)

  @@id(guildid, map: "suggestionsettings_pkey")
  @@index(guildid)
}

model suggestionvotes {
  guildid   String   @db.VarChar
  channelid String   @db.VarChar
  msgid     String   @db.VarChar
  userid    String   @db.VarChar
  downvoted String[] @db.VarChar
  upvoted   String[] @db.VarChar
  approved  Boolean  @db.Boolean @default(false)

  @@id(msgid, map: "suggestionvotes_pkey")
  @@index(guildid)
}

model users {
  userid         String   @db.VarChar
  votereminders  Boolean  @db.Boolean @default(true)
  username       String   @db.Text    @default("Unkown User")
  avatar         String   @db.Text    @default("https://cdn.discordapp.com/embed/avatars/0.png")
  socials        String[] @db.Text
  socialstype    String[] @db.Text
  lastfetch      Decimal  @db.Decimal @default(1)
  email          String?  @db.Text
  refreshtoken   String?  @db.Text
  expires        Decimal? @db.Decimal
  accesstoken    String?  @db.Text
  ptremindersent Boolean  @db.Boolean @default(false)

  @@id(userid, map: "users_pkey")
  @@index(userid)
}


model blockedusers {
 userid        String   @db.VarChar
 blockeduserid String   @db.VarChar
 blockedcmd    String[] @db.Text

 @@index(userid)
 @@id([userid, blockeduserid])
}

model verification {
  guildid      String  @db.VarChar
  logchannel   String? @db.VarChar
  finishedrole String? @db.VarChar
  pendingrole  String? @db.VarChar
  startchannel String? @db.VarChar
  selfstart    Boolean @db.Boolean @default(false)
  kickafter    Decimal @db.Decimal @default(600)
  kicktof      Boolean @db.Boolean @default(false)
  active       Boolean @db.Boolean @default(false)

  @@id(guildid, map: "verification_pkey")
  @@index(guildid)
}

model voterewards {
  guildid            String   @db.VarChar
  uniquetimestamp    Decimal  @db.Decimal
  tier               Decimal? @db.Decimal
  linkedid           Decimal? @db.Decimal
  rewardroles        String[] @db.VarChar
  rewardxpmultiplier Decimal? @db.Decimal
  rewardcurrency     Decimal? @db.Decimal
  rewardxp           Decimal? @db.Decimal
  active             Boolean  @db.Boolean @default(false)

  @@id(uniquetimestamp, map: "voterewards_pkey")
  @@index([guildid, uniquetimestamp])
}

model voters {
  userid             String   @db.VarChar
  guildid            String   @db.VarChar
  removetime         Decimal  @db.Decimal
  voted              String   @db.VarChar
  votetype           VoteType
  tier               Decimal  @db.Decimal
  rewardroles        String[] @db.VarChar
  rewardxp           Decimal? @db.Decimal
  rewardcurrency     Decimal? @db.Decimal
  rewardxpmultiplier Decimal? @db.Decimal

  @@id([userid, voted], map: "voters_pkey")
  @@index(userid)
}

model votesettings {
  uniquetimestamp     Decimal  @db.Decimal
  guildid             String   @db.VarChar
  token               String?  @db.Text
  reminders           Boolean  @db.Boolean @default(false)
  announcementchannel String?  @db.VarChar
  active              Boolean  @db.Boolean @default(false)
  linkedid            Decimal? @db.Decimal

  @@id(uniquetimestamp, map: "votesettings_pkey")
  @@index([guildid, uniquetimestamp])
}

model welcome {
  guildid   String   @db.VarChar
  channelid String?  @db.VarChar
  active    Boolean  @db.Boolean @default(false)
  embed     Decimal? @db.Decimal
  pingroles String[] @db.VarChar
  pingusers String[] @db.VarChar
  pingjoin  Boolean  @db.Boolean @default(false)

  @@id(guildid, map: "welcome_pkey")
  @@index(guildid)
}

model deletethreads {
  guildid    String  @db.VarChar
  channelid  String  @db.VarChar
  deletetime Decimal @db.Decimal

  @@id(guildid, map: "deletethreads_pkey")
  @@index(guildid)
}

model shop {
 guildid         String   @db.VarChar
 active          Boolean  @db.Boolean @default(false)
 currencyemote   String?  @db.Text

 @@id(guildid, map: "shop_pkey")
 @@index(guildid)
}

model shopitems {
 guildid         String   @db.VarChar
 active          Boolean  @db.Boolean @default(false)
 roles           String[] @db.VarChar
 price           Decimal? @db.Decimal
 uniquetimestamp Decimal  @db.Decimal
 shoptype        ShopType             @default(command)
 buttontext      String?  @db.Text
 buttonemote     String?  @db.Text
 msgid           String?  @db.VarChar
 channelid       String?  @db.VarChar

 @@id(uniquetimestamp, map: "shopitems_pkey")
 @@index([guildid, uniquetimestamp])
}

model shopusers {
 userid        String   @db.VarChar
 guildid       String   @db.VarChar
 boughtids     String[] @db.VarChar

 @@id([userid, guildid], map: "shopusers_pkey")
 @@index([userid, guildid])
}

model voicehubs {
 uniquetimestamp Decimal  @db.Decimal
 guildid         String   @db.VarChar
 active          Boolean  @db.Boolean @default(false)
 channelid       String?  @db.VarChar
 categoryid      String?  @db.VarChar
 deletetime      Decimal  @db.Decimal @default(3600)
 blroleid        String[] @db.VarChar
 bluserid        String[] @db.VarChar
 wlroleid        String[] @db.VarChar
 wluserid        String[] @db.VarChar


 @@id(uniquetimestamp, map: "voicehubs_pkey")
 @@index([guildid, uniquetimestamp])
}

model voicechannels {
 ownerid          String   @db.VarChar
 guildid          String   @db.VarChar
 channelid        String   @db.VarChar
 hubid            String   @db.VarChar
 everyonelefttime Decimal? @db.Decimal

 @@id([guildid, channelid], map: "voicechannels_pkey")
 @@index([guildid, channelid])
}

model antiraid {
 guildid        String                 @db.VarChar
 active         Boolean                @db.Boolean @default(false)

 posttof        Boolean                @db.Boolean @default(false)
 postchannels   String[]               @db.VarChar
 pingroles      String[]               @db.VarChar
 pingusers      String[]               @db.VarChar
 timeout        Decimal                @db.Decimal @default(15)
 jointhreshold  Decimal                @db.Decimal @default(5)
 actiontof      Boolean                @db.Boolean @default(true)
 action         AntiRaidPunishmentType             @default(kick)
 disableinvites Boolean                @db.Boolean @default(true)

 @@id(guildid, map: "antiraid_pkey")
 @@index([guildid])
}