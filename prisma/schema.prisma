generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model afk {
  userid  String  @db.VarChar
  text    String
  since   Decimal @db.Decimal
  guildid String  @db.VarChar

  @@ignore
}

model antiraidsettings {
  guildid       String   @id @db.VarChar
  active        Boolean
  punishment    Boolean
  posttof       Boolean?
  postchannel   String?  @db.VarChar
  pingroles     String[] @db.VarChar
  pingusers     String[] @db.VarChar
  time          Decimal  @db.Decimal
  jointhreshold Decimal  @db.Decimal
  punishmenttof Boolean?
}

model antispamsettings {
  guildid              String   @id @unique @db.VarChar
  active               Boolean
  giveofficialwarnstof Boolean
  muteafterwarnsamount Decimal  @default(dbgenerated("nextval('antispamsettings_muteafterwarnsamount_seq'::regclass)")) @db.Decimal
  kickafterwarnsamount Decimal  @default(dbgenerated("nextval('antispamsettings_kickafterwarnsamount_seq'::regclass)")) @db.Decimal
  banafterwarnsamount  Decimal  @default(dbgenerated("nextval('antispamsettings_banafterwarnsamount_seq'::regclass)")) @db.Decimal
  muteenabledtof       Boolean
  kickenabledtof       Boolean
  banenabledtof        Boolean
  readofwarnstof       Boolean
  bpuserid             String[] @db.VarChar
  bpchannelid          String[] @db.VarChar
  bproleid             String[] @db.VarChar
  forcedisabled        Boolean? @default(false)
}

model antivirus {
  guildid              String   @id @db.VarChar
  active               Boolean
  bantof               Boolean
  warntof              Boolean
  kicktof              Boolean
  mutetof              Boolean
  verbaltof            Boolean
  muteafterwarnsamount Decimal? @db.Decimal
  banafterwarnsamount  Decimal? @db.Decimal
  kickafterwarnsamount Decimal? @db.Decimal
  warnafterwarnsamount Decimal? @db.Decimal
  minimize             Decimal? @db.Decimal
  delete               Decimal? @db.Decimal
  linklogging          Boolean
  linklogchannels      String[] @db.VarChar
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model antiviruslog {
  guildid    String  @db.VarChar
  userid     String  @db.VarChar
  type       String
  dateofwarn Decimal @db.Decimal

  @@ignore
}

model appealquestions {
  guildid         String   @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
  active          Boolean  @default(false)
  question        String?
  answertype      String?
  required        Boolean  @default(true)
  options         String[]
}

model appeals {
  userid        String   @db.VarChar
  guildid       String   @db.VarChar
  questions     String[]
  questiontypes String[]
  answers       String[]
  punishmentid  Decimal  @db.Decimal

  @@id([punishmentid, userid])
}

model appealsettings {
  guildid   String   @id @db.VarChar
  active    Boolean  @default(false)
  channelid String?  @db.VarChar
  blusers   String[] @db.VarChar
}

model art {
  userid   String  @db.VarChar
  created  Decimal @id @db.Decimal
  url      String
  type     String  @default("full")
  verified Boolean @default(false)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model autopunish {
  guildid             String   @db.VarChar
  uniquetimestamp     Decimal  @db.Decimal
  duration            Decimal? @db.Decimal
  warnamount          Decimal  @db.Decimal
  punishment          Decimal? @db.Decimal
  active              Boolean
  addroles            String[] @db.VarChar
  removeroles         String[] @db.VarChar
  sendtof             Boolean
  sendchannels        String[] @db.VarChar
  confirmationreq     Boolean
  punishmentawaittime Decimal? @db.Decimal

  @@ignore
}

model autorole {
  guildid    String   @id @db.VarChar
  active     Boolean
  botroleid  String[] @db.VarChar
  userroleid String[] @db.VarChar
  allroleid  String[] @db.VarChar
}

model balance {
  userid  String   @db.VarChar
  guildid String   @db.VarChar
  balance Decimal? @db.Decimal

  @@id([userid, guildid])
}

model blacklists {
  active      Boolean
  warntof     Boolean
  kicktof     Boolean
  bantof      Boolean
  warnafter   Decimal? @db.Decimal
  muteafter   Decimal? @db.Decimal
  kickafter   Decimal? @db.Decimal
  banafter    Decimal? @db.Decimal
  bpchannelid String[] @db.VarChar
  bproleid    String[] @db.VarChar
  bpuserid    String[] @db.VarChar
  words       String[]
  guildid     String   @id @db.VarChar
  mutetof     Boolean
}

model contributers {
  userid String   @id @db.VarChar
  roles  String[]
}

model cooldowns {
  command         String
  cooldown        Decimal  @db.Decimal
  active          Boolean
  bpchannelid     String[] @db.VarChar
  bproleid        String[] @db.VarChar
  bpuserid        String[] @db.VarChar
  activechannelid String[] @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
  guildid         String   @db.VarChar
}

model customembeds {
  color           String?
  title           String?
  url             String?
  authorname      String?
  authoriconurl   String?
  authorurl       String?
  description     String?
  thumbnail       String?
  fieldnames      String[]
  fieldvalues     String[]
  fieldinlines    Boolean[]
  image           String?
  footertext      String?
  footericonurl   String?
  uniquetimestamp Decimal   @id @db.Decimal
  guildid         String    @db.VarChar
  name            String?
  timestamp       String?
}

model deletecommands {
  uniquetimestamp Decimal  @id(map: "deletecommand_pkey") @db.Decimal
  guildid         String   @db.VarChar
  deletecommand   Boolean
  deletereply     Boolean
  deletetimeout   Decimal? @db.Decimal
  active          Boolean
  commands        String[]
}

model disabledcommands {
  guildid         String   @id(map: "disabledCommands_pkey") @db.VarChar
  active          Boolean
  commands        String[]
  channels        String[] @db.VarChar
  bproleid        String[] @db.VarChar
  blroleid        String[] @db.VarChar
  bpuserid        String[] @db.VarChar
  bluserid        String[] @db.VarChar
  uniquetimestamp Decimal? @db.Decimal
}

model disboard {
  guildid        String   @id(map: "guildsettings_pkey") @db.VarChar
  active         Boolean
  nextbump       Decimal? @db.Decimal
  channelid      String?  @db.VarChar
  repeatreminder Decimal? @db.Decimal
  roles          String[] @db.VarChar
  users          String[] @db.VarChar
  tempchannelid  String?  @db.VarChar
  deletereply    Boolean
  msgid          String?  @db.VarChar
}

model giveawaycollecttime {
  userid   String  @db.VarChar
  giveaway String  @db.VarChar
  endtime  Decimal @db.Decimal
  msgid    String  @id @db.VarChar
}

model giveaways {
  guildid      String   @db.VarChar
  msgid        String   @id @db.VarChar
  description  String
  winnercount  Decimal  @db.Decimal
  endtime      Decimal  @db.Decimal
  reqrole      String?  @db.VarChar
  actualprize  String?
  host         String   @db.VarChar
  ended        Boolean
  channelid    String   @db.VarChar
  participants String[] @db.VarChar
  collecttime  Decimal? @db.Decimal
}

model guilds {
  guildid     String  @id @db.VarChar
  name        String
  icon        String?
  banner      String?
  invite      String?
  membercount Decimal @default(2) @db.Decimal
}

model guildsettings {
  guildid          String  @id(map: "guildsettings_pkey1") @db.VarChar
  prefix           String?
  interactionsmode Boolean
  lan              String
  errorchannel     String? @db.VarChar
  vanity           String?
  voterole         String? @db.VarChar
  token            String? @db.Text
  appid            String? @db.VarChar
  publickey        String? @db.Text
}

model level {
  userid  String   @db.VarChar
  guildid String   @default(dbgenerated("1")) @db.VarChar
  type    String
  xp      Decimal  @db.Decimal
  level   Decimal? @db.Decimal

  @@id([userid, guildid, type])
}

model leveling {
  guildid         String   @id @db.VarChar
  active          Boolean
  xpmultiplier    Decimal  @db.Decimal
  blchannels      String[] @db.VarChar
  blroles         String[] @db.VarChar
  blusers         String[] @db.VarChar
  wlchannels      String[] @db.VarChar
  wlroles         String[] @db.VarChar
  wlusers         String[] @db.VarChar
  xppermsg        Decimal  @db.Decimal
  rolemode        Boolean
  lvlupmode       Decimal? @db.Decimal
  lvlupdeltimeout Decimal? @db.Decimal
  lvlupchannels   String[] @db.VarChar
  lvlupemotes     String[] @db.VarChar
  embed           Decimal? @db.Decimal
  ignoreprefixes  Boolean
  prefixes        String[]
}

model levelingmultiplierchannels {
  guildid         String   @db.VarChar
  channels        String[] @db.VarChar
  multiplier      Decimal  @db.Decimal
  uniquetimestamp Decimal  @id @db.Decimal
}

model levelingmultiplierroles {
  guildid         String   @db.VarChar
  roles           String[] @db.VarChar
  multiplier      Decimal? @db.Decimal
  uniquetimestamp Decimal  @id @db.Decimal
}

model levelingroles {
  guildid         String   @db.VarChar
  level           Decimal? @db.Decimal
  roles           String[] @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
}

model levelingruleschannels {
  guildid               String   @db.VarChar
  channels              String[] @db.VarChar
  rules                 Decimal? @db.Decimal
  uniquetimestamp       Decimal  @id @db.Decimal
  hasleastattachments   Decimal? @db.Decimal
  hasmostattachments    Decimal? @db.Decimal
  hasleastcharacters    Decimal? @db.Decimal
  hasmostcharacters     Decimal? @db.Decimal
  hasleastwords         Decimal? @db.Decimal
  hasmostwords          Decimal? @db.Decimal
  mentionsleastusers    Decimal? @db.Decimal
  mentionsmostusers     Decimal? @db.Decimal
  mentionsleastchannels Decimal? @db.Decimal
  mentionsmostchannels  Decimal? @db.Decimal
  mentionsleastroles    Decimal? @db.Decimal
  mentionsmostroles     Decimal? @db.Decimal
  hasleastlinks         Decimal? @db.Decimal
  hasmostlinks          Decimal? @db.Decimal
  hasleastemotes        Decimal? @db.Decimal
  hasmostemotes         Decimal? @db.Decimal
  hasleastmentions      Decimal? @db.Decimal
  hasmostmentions       Decimal? @db.Decimal
}

model logchannels {
  guildid             String   @id @db.VarChar
  emojievents         String[] @db.VarChar
  guildevents         String[] @db.VarChar
  inviteevents        String[] @db.VarChar
  messageevents       String[] @db.VarChar
  modlogs             String[] @db.VarChar
  roleevents          String[] @db.VarChar
  userevents          String[] @db.VarChar
  voiceevents         String[] @db.VarChar
  webhookevents       String[] @db.VarChar
  settingslog         String[] @db.VarChar
  channelevents       String[] @db.VarChar
  stageinstanceevents String[] @db.VarChar
  stickerevents       String[] @db.VarChar
  threadevents        String[] @db.VarChar
  guildmemberevents   String[] @db.VarChar
  stageevents         String[] @db.VarChar
}

model modroles {
  guildid             String   @db.VarChar
  roleid              String   @db.VarChar
  perms               BigInt?
  whitelistedcommands String[]
  whitelistedusers    String[] @db.VarChar
  whitelistedroles    String[] @db.VarChar
  blacklistedroles    String[] @db.VarChar
  blacklistedusers    String[] @db.VarChar
  active              Boolean
  blacklistedcommands String[]
  uniquetimestamp     Decimal  @db.Decimal
  mutedurationdefault Decimal? @db.Decimal

  @@unique([guildid, roleid], map: "unique")
}

model modsettings {
  guildid         String   @id @db.VarChar
  bans            Boolean
  channelbans     Boolean
  kicks           Boolean
  mutes           Boolean
  warns           Boolean
  banstime        Decimal? @db.Decimal
  channelbanstime Decimal? @db.Decimal
  kickstime       Decimal? @db.Decimal
  mutestime       Decimal? @db.Decimal
  warnstime       Decimal? @db.Decimal
}

model nitroroles {
  guildid         String   @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
  roles           String[] @db.VarChar
  days            Decimal? @db.Decimal
}

model nitrosettings {
  guildid     String   @id @db.VarChar
  active      Boolean
  logchannels String[] @db.VarChar
  rolemode    Boolean
}

model nitrousers {
  guildid    String   @db.VarChar
  userid     String   @db.VarChar
  booststart Decimal  @id @db.Decimal
  boostend   Decimal? @db.Decimal
}

model policy_guilds {
  guildid String @id @db.VarChar
}

model policy_users {
  userid String @id @db.VarChar
}

model punish_bans {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?
  uniquetimestamp Decimal  @id(map: "mutes_pkey") @db.Decimal
  channelid       String   @db.VarChar
  channelname     String
  executorid      String   @db.VarChar
  executorname    String
  msgid           Decimal  @db.Decimal
  duration        Decimal? @db.Decimal
}

model punish_channelbans {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?
  uniquetimestamp Decimal  @id(map: "punish_channelban_pkey") @db.Decimal
  channelid       String   @db.VarChar
  channelname     String
  executorid      String   @db.VarChar
  executorname    String
  msgid           String   @db.VarChar
  banchannelid    String   @db.VarChar
  duration        Decimal? @db.Decimal
}

model punish_kicks {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           Decimal @db.Decimal
}

model punish_mutes {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?
  uniquetimestamp Decimal  @id @db.Decimal
  channelid       String   @db.VarChar
  channelname     String
  executorid      String   @db.VarChar
  executorname    String
  msgid           String   @db.VarChar
  duration        Decimal? @db.Decimal
}

model punish_tempbans {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar
  duration        Decimal @db.Decimal
}

model punish_tempchannelbans {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id(map: "punish_tempchannelban_pkey") @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar
  banchannelid    String  @db.VarChar
  duration        Decimal @db.Decimal
}

model punish_tempmutes {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar
  duration        Decimal @db.Decimal
}

model punish_warns {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar
}

model reminders {
  userid          String  @db.VarChar
  channelid       String  @db.VarChar
  reason          String
  uniquetimestamp Decimal @id @db.Decimal
  endtime         Decimal @db.Decimal
  msgid           Decimal @db.Decimal
}

model reviews {
  userid   String  @id @db.VarChar
  score    Decimal @default(1) @db.Decimal
  username String
  avatar   String?
  content  String
}

model roleseparator {
  guildid         String   @db.VarChar
  separator       String   @db.VarChar
  active          Boolean
  stoprole        String?  @db.VarChar
  isvarying       Boolean
  roles           String[] @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
}

model roleseparatorsettings {
  guildid      String   @id @db.VarChar
  stillrunning Boolean
  channelid    String?  @db.VarChar
  messageid    String?  @db.VarChar
  duration     Decimal? @db.Decimal
  startat      Decimal? @db.Decimal
  index        Decimal? @db.Decimal
  length       Decimal? @db.Decimal
}

model rrbuttons {
  uniquetimestamp Decimal  @id @db.Decimal
  roles           String[] @db.VarChar
  emoteid         String?  @db.VarChar
  buttontext      String?
  active          Boolean
  messagelink     String
  guildid         String   @db.VarChar
}

model rrreactions {
  uniquetimestamp Decimal  @id @db.Decimal
  emoteid         String   @db.VarChar
  roles           String[] @db.VarChar
  active          Boolean
  messagelink     String
  guildid         String   @db.VarChar
}

model rrsettings {
  guildid         String   @db.VarChar
  messagelink     String
  uniquetimestamp Decimal  @id @db.Decimal
  name            String
  onlyone         Boolean?
  active          Boolean
  anyroles        String[] @db.VarChar
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model selfroles {
  guildid          String   @db.VarChar
  roles            String[] @db.VarChar
  onlyone          Boolean?
  uniquetimestamp  Decimal  @db.Decimal
  blacklistedroles String[] @db.VarChar
  blacklistedusers String[] @db.VarChar
  whitelistedroles String[] @db.VarChar
  whitelistedusers String[] @db.VarChar
  active           Boolean
  name             String

  @@ignore
}

model stats {
  usercount    Decimal  @id @db.Decimal
  guildcount   Decimal  @db.Decimal
  channelcount Decimal  @db.Decimal
  rolecount    Decimal  @db.Decimal
  allusers     Decimal  @db.Decimal
  willis       String[]
  count        Decimal? @db.Decimal
  antispam     Boolean
  verbosity    Boolean
  heartbeat    Decimal  @db.Decimal
}

model sticky {
  guildid           String   @id(map: "stickyroles_pkey") @db.VarChar
  roles             String[] @db.VarChar
  stickyrolesmode   Boolean
  stickyrolesactive Boolean
  stickypermsactive Boolean
}

model stickymessages {
  guildid         String  @db.VarChar
  uniquetimestamp Decimal @id @db.Decimal
  lastmsgid       String  @db.VarChar
  channelid       String  @db.VarChar
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model stickypermmembers {
  userid    String  @db.VarChar
  guildid   String  @db.VarChar
  channelid String  @db.VarChar
  denybits  BigInt?
  allowbits BigInt?

  @@ignore
}

model stickyrolemembers {
  userid  String   @db.VarChar
  guildid String   @db.VarChar
  roles   String[] @db.VarChar

  @@id([userid, guildid])
}

model suggestionsettings {
  guildid        String   @id @db.VarChar
  active         Boolean
  channelid      String?  @db.VarChar
  novoteroles    String[] @db.VarChar
  novoteusers    String[] @db.VarChar
  approverroleid String[] @db.VarChar
  anon           Boolean
  nosendroles    String[] @db.VarChar
  nosendusers    String[] @db.VarChar
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model suggestionvotes {
  guildid   String   @db.VarChar
  msgid     String   @db.VarChar
  authorid  String   @db.VarChar
  downvoted String[] @db.VarChar
  upvoted   String[] @db.VarChar
  ended     Boolean

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model toxicitycheck {
  guildid String  @db.VarChar
  userid  String  @db.VarChar
  amount  Decimal @db.Decimal

  @@ignore
}

model users {
  userid        String   @id @db.VarChar
  votereminders Boolean  @default(true)
  username      String   @default("Unkown User")
  avatar        String?
  socials       String[]
  socialstype   String[]
  lastfetch     Decimal  @default(1) @db.Decimal
  email         String?
  accesstoken   String?
  refreshtoken  String?
  expires       Decimal? @db.Decimal
  lastvoted     Decimal? @db.Decimal
}

model verification {
  guildid      String   @id @db.VarChar
  logchannel   String?  @db.VarChar
  finishedrole String?  @db.VarChar
  pendingrole  String?  @db.VarChar
  startchannel String?  @db.VarChar
  selfstart    Boolean
  kickafter    Decimal? @db.Decimal
  kicktof      Boolean
  active       Boolean
}

model votereminder {
  userid     String  @db.VarChar
  removetime Decimal @db.Decimal
  voted      String  @db.VarChar

  @@id([userid, voted])
}

model voterewards {
  userid     String  @db.VarChar
  roleid     String  @db.VarChar
  removetime Decimal @db.Decimal
  voted      String  @db.VarChar

  @@id([userid, voted])
}

model votetokens {
  guildid String @db.VarChar
  token   String @id
}

model welcome {
  guildid   String   @id @db.VarChar
  channelid String?  @db.VarChar
  active    Boolean
  embed     Decimal? @db.Decimal
  pingroles String[] @db.VarChar
  pingusers String[] @db.VarChar
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model statschannel {
  guildid   String  @db.VarChar
  channelid String  @db.VarChar
  type      String?

  @@ignore
}
